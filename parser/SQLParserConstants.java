package parser;

/* Generated By:JavaCC: Do not edit this line. SQLParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SQLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int AGGREGATE = 11;
  /** RegularExpression Id. */
  int ALL = 12;
  /** RegularExpression Id. */
  int AND = 13;
  /** RegularExpression Id. */
  int AS = 14;
  /** RegularExpression Id. */
  int ASC = 15;
  /** RegularExpression Id. */
  int AVG = 16;
  /** RegularExpression Id. */
  int BETWEEN = 17;
  /** RegularExpression Id. */
  int BIGINT = 18;
  /** RegularExpression Id. */
  int BOOLEAN = 19;
  /** RegularExpression Id. */
  int BY = 20;
  /** RegularExpression Id. */
  int CASE = 21;
  /** RegularExpression Id. */
  int CAST = 22;
  /** RegularExpression Id. */
  int CHAR = 23;
  /** RegularExpression Id. */
  int CONVERT = 24;
  /** RegularExpression Id. */
  int COUNT = 25;
  /** RegularExpression Id. */
  int CROSS = 26;
  /** RegularExpression Id. */
  int DATE = 27;
  /** RegularExpression Id. */
  int DATETIME = 28;
  /** RegularExpression Id. */
  int DESC = 29;
  /** RegularExpression Id. */
  int DISTINCT = 30;
  /** RegularExpression Id. */
  int DIV = 31;
  /** RegularExpression Id. */
  int ELSE = 32;
  /** RegularExpression Id. */
  int END = 33;
  /** RegularExpression Id. */
  int EXISTS = 34;
  /** RegularExpression Id. */
  int FALSE = 35;
  /** RegularExpression Id. */
  int FROM = 36;
  /** RegularExpression Id. */
  int GROUP = 37;
  /** RegularExpression Id. */
  int HAVING = 38;
  /** RegularExpression Id. */
  int IN = 39;
  /** RegularExpression Id. */
  int INNER = 40;
  /** RegularExpression Id. */
  int INT = 41;
  /** RegularExpression Id. */
  int INTEGER = 42;
  /** RegularExpression Id. */
  int IS = 43;
  /** RegularExpression Id. */
  int JOIN = 44;
  /** RegularExpression Id. */
  int LEFT = 45;
  /** RegularExpression Id. */
  int LIKE = 46;
  /** RegularExpression Id. */
  int LIMIT = 47;
  /** RegularExpression Id. */
  int MAX = 48;
  /** RegularExpression Id. */
  int MIN = 49;
  /** RegularExpression Id. */
  int MOD = 50;
  /** RegularExpression Id. */
  int NOT = 51;
  /** RegularExpression Id. */
  int NULL = 52;
  /** RegularExpression Id. */
  int ON = 53;
  /** RegularExpression Id. */
  int OR = 54;
  /** RegularExpression Id. */
  int ORDER = 55;
  /** RegularExpression Id. */
  int OUTER = 56;
  /** RegularExpression Id. */
  int RIGHT = 57;
  /** RegularExpression Id. */
  int SELECT = 58;
  /** RegularExpression Id. */
  int SMALLINT = 59;
  /** RegularExpression Id. */
  int START = 60;
  /** RegularExpression Id. */
  int SUM = 61;
  /** RegularExpression Id. */
  int SYMBOL = 62;
  /** RegularExpression Id. */
  int THEN = 63;
  /** RegularExpression Id. */
  int TIME = 64;
  /** RegularExpression Id. */
  int TINYINT = 65;
  /** RegularExpression Id. */
  int TRUE = 66;
  /** RegularExpression Id. */
  int USING = 67;
  /** RegularExpression Id. */
  int VARCHAR = 68;
  /** RegularExpression Id. */
  int WHEN = 69;
  /** RegularExpression Id. */
  int WHERE = 70;
  /** RegularExpression Id. */
  int XOR = 71;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 72;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 73;
  /** RegularExpression Id. */
  int HEX_LITERAL = 74;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 75;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 76;
  /** RegularExpression Id. */
  int EXPONENT = 77;
  /** RegularExpression Id. */
  int STRING_LITERAL = 78;
  /** RegularExpression Id. */
  int SQ_STRING_LITERAL = 79;
  /** RegularExpression Id. */
  int DQ_STRING_LITERAL = 80;
  /** RegularExpression Id. */
  int IDENTIFIER = 81;
  /** RegularExpression Id. */
  int LETTER = 82;
  /** RegularExpression Id. */
  int PART_LETTER = 83;
  /** RegularExpression Id. */
  int SEMICOLON = 84;
  /** RegularExpression Id. */
  int COMMA = 85;
  /** RegularExpression Id. */
  int PERIOD = 86;
  /** RegularExpression Id. */
  int L_PAREN = 87;
  /** RegularExpression Id. */
  int R_PAREN = 88;
  /** RegularExpression Id. */
  int PLUS = 89;
  /** RegularExpression Id. */
  int MINUS = 90;
  /** RegularExpression Id. */
  int ASTERISK = 91;
  /** RegularExpression Id. */
  int SLASH = 92;
  /** RegularExpression Id. */
  int PERCENT = 93;
  /** RegularExpression Id. */
  int LT = 94;
  /** RegularExpression Id. */
  int GT = 95;
  /** RegularExpression Id. */
  int EQ = 96;
  /** RegularExpression Id. */
  int LTE = 97;
  /** RegularExpression Id. */
  int GTE = 98;
  /** RegularExpression Id. */
  int NE = 99;
  /** RegularExpression Id. */
  int NE1 = 100;
  /** RegularExpression Id. */
  int NE2 = 101;
  /** RegularExpression Id. */
  int EXCLAMATION = 102;
  /** RegularExpression Id. */
  int TILDE = 103;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"--\"",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "<token of kind 10>",
    "\"aggregate\"",
    "\"all\"",
    "\"and\"",
    "\"as\"",
    "\"asc\"",
    "\"avg\"",
    "\"between\"",
    "\"bigint\"",
    "\"boolean\"",
    "\"by\"",
    "\"case\"",
    "\"cast\"",
    "\"char\"",
    "\"convert\"",
    "\"count\"",
    "\"cross\"",
    "\"date\"",
    "\"datetime\"",
    "\"desc\"",
    "\"distinct\"",
    "\"div\"",
    "\"else\"",
    "\"end\"",
    "\"exists\"",
    "\"false\"",
    "\"from\"",
    "\"group\"",
    "\"having\"",
    "\"in\"",
    "\"inner\"",
    "\"int\"",
    "\"integer\"",
    "\"is\"",
    "\"join\"",
    "\"left\"",
    "\"like\"",
    "\"limit\"",
    "\"max\"",
    "\"min\"",
    "\"mod\"",
    "\"not\"",
    "\"null\"",
    "\"on\"",
    "\"or\"",
    "\"order\"",
    "\"outer\"",
    "\"right\"",
    "\"select\"",
    "\"smallint\"",
    "\"start\"",
    "\"sum\"",
    "\"symbol\"",
    "\"then\"",
    "\"time\"",
    "\"tinyint\"",
    "\"true\"",
    "\"using\"",
    "\"varchar\"",
    "\"when\"",
    "\"where\"",
    "\"xor\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<SQ_STRING_LITERAL>",
    "<DQ_STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"<\"",
    "\">\"",
    "\"=\"",
    "\"<=\"",
    "\">=\"",
    "<NE>",
    "\"<>\"",
    "\"!=\"",
    "\"!\"",
    "\"~\"",
  };

}
