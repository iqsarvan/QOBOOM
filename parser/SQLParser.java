package parser;

/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
import syntaxtree.*;
import java.util.Vector;


public class SQLParser implements SQLParserConstants {

  static final public SqlScript SqlScript() throws ParseException {
   NodeList n0 = new NodeList();
   SqlStatement n1;
   NodeToken n2;
   Token n3;
    label_1:
    while (true) {
      n1 = SqlStatement();
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
     n0.nodes.trimToSize();
    n3 = jj_consume_token(0);
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new SqlScript(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public SqlStatement SqlStatement() throws ParseException {
   SqlOperator n0;
   NodeToken n1;
   Token n2;
    n0 = SqlOperator();
    n2 = jj_consume_token(SEMICOLON);
                    n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new SqlStatement(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public SqlOperator SqlOperator() throws ParseException {
   Query n0;
    n0 = Query();
     {if (true) return new SqlOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Query Query() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   SelectList n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   FromList n14;
   NodeOptional n15;
   WhereClause n16;
   NodeOptional n17;
   GroupByClause n18;
   NodeOptional n19;
   OrderByClause n20;
   NodeOptional n21;
   LimitClause n22;
    n1 = jj_consume_token(SELECT);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
    case DISTINCT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        n5 = jj_consume_token(ALL);
                    n4 = JTBToolkit.makeNodeToken(n5);
           n3 = new NodeChoice(n4, 0);
        break;
      case DISTINCT:
        n7 = jj_consume_token(DISTINCT);
                         n6 = JTBToolkit.makeNodeToken(n7);
           n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
      n10 = jj_consume_token(ASTERISK);
                          n9 = JTBToolkit.makeNodeToken(n10);
           n8 = new NodeChoice(n9, 0);
      break;
    case AGGREGATE:
    case AVG:
    case CASE:
    case CAST:
    case CONVERT:
    case COUNT:
    case EXISTS:
    case FALSE:
    case IN:
    case MAX:
    case MIN:
    case NOT:
    case NULL:
    case SUM:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case L_PAREN:
    case MINUS:
    case EXCLAMATION:
    case TILDE:
      n11 = SelectList();
           n8 = new NodeChoice(n11, 1);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
        n15 = new NodeOptional();
        n17 = new NodeOptional();
        n19 = new NodeOptional();
        n21 = new NodeOptional();
        n13 = new NodeSequence(5);
      n14 = FromList();
        n13.addNode(n14);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        n16 = WhereClause();
           n15.addNode(n16);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
        n13.addNode(n15);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
        n18 = GroupByClause();
           n17.addNode(n18);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
        n13.addNode(n17);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDER:
        n20 = OrderByClause();
           n19.addNode(n20);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
        n13.addNode(n19);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIMIT:
        n22 = LimitClause();
           n21.addNode(n22);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
        n13.addNode(n21);
        n12.addNode(n13);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
     {if (true) return new Query(n0,n2,n8,n12);}
    throw new Error("Missing return statement in function");
  }

  static final public SelectList SelectList() throws ParseException {
   SelectExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SelectExpression n5;
    n0 = SelectExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_2;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = SelectExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new SelectList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public SelectExpression SelectExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   RelationName n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   SchemaName n8;
   NodeToken n9;
   Token n10;
   RelationName n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   ValueExpression n17;
   NodeOptional n18 = new NodeOptional();
   NodeSequence n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   Alias n23;
    if (jj_2_2(5)) {
           n1 = new NodeSequence(4);
      n2 = RelationName();
           n1.addNode(n2);
      n4 = jj_consume_token(PERIOD);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n1.addNode(n3);
      n6 = jj_consume_token(ASTERISK);
                         n5 = JTBToolkit.makeNodeToken(n6);
           n1.addNode(n5);
           n0 = new NodeChoice(n1, 0);
    } else if (jj_2_3(5)) {
           n7 = new NodeSequence(6);
      n8 = SchemaName();
           n7.addNode(n8);
      n10 = jj_consume_token(PERIOD);
                        n9 = JTBToolkit.makeNodeToken(n10);
           n7.addNode(n9);
      n11 = RelationName();
           n7.addNode(n11);
      n13 = jj_consume_token(PERIOD);
                        n12 = JTBToolkit.makeNodeToken(n13);
           n7.addNode(n12);
      n15 = jj_consume_token(ASTERISK);
                          n14 = JTBToolkit.makeNodeToken(n15);
           n7.addNode(n14);
           n0 = new NodeChoice(n7, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AGGREGATE:
      case AVG:
      case CASE:
      case CAST:
      case CONVERT:
      case COUNT:
      case EXISTS:
      case FALSE:
      case IN:
      case MAX:
      case MIN:
      case NOT:
      case NULL:
      case SUM:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case L_PAREN:
      case MINUS:
      case EXCLAMATION:
      case TILDE:
           n16 = new NodeSequence(2);
        n17 = ValueExpression();
           n16.addNode(n17);
        if (jj_2_1(2)) {
              n20 = new NodeOptional();
              n19 = new NodeSequence(2);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AS:
            n22 = jj_consume_token(AS);
                          n21 = JTBToolkit.makeNodeToken(n22);
                 n20.addNode(n21);
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
              n19.addNode(n20);
          n23 = Alias();
              n19.addNode(n23);
              n18.addNode(n19);
        } else {
          ;
        }
           n16.addNode(n18);
           n0 = new NodeChoice(n16, 2);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new SelectExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FromList FromList() throws ParseException {
   NodeToken n0;
   Token n1;
   FromListExpression n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   FromListExpression n7;
    n1 = jj_consume_token(FROM);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = FromListExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = FromListExpression();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new FromList(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public FromListExpression FromListExpression() throws ParseException {
   Relation n0;
   NodeListOptional n1 = new NodeListOptional();
   JoinClause n2;
    n0 = Relation();
    label_4:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_4;
      }
      n2 = JoinClause();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new FromListExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Relation Relation() throws ParseException {
   NodeChoice n0;
   SingleRelation n1;
   NamedSubquery n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n1 = SingleRelation();
        n0 = new NodeChoice(n1, 0);
      break;
    case L_PAREN:
      n2 = NamedSubquery();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Relation(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public NamedSubquery NamedSubquery() throws ParseException {
   Subquery n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   Alias n6;
    n0 = Subquery();
    if (jj_2_5(2)) {
        n3 = new NodeOptional();
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        n5 = jj_consume_token(AS);
                   n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
        n2.addNode(n3);
      n6 = Alias();
        n2.addNode(n6);
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new NamedSubquery(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Subquery Subquery() throws ParseException {
   NodeToken n0;
   Token n1;
   Query n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(L_PAREN);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Query();
    n4 = jj_consume_token(R_PAREN);
                  n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new Subquery(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public SingleRelation SingleRelation() throws ParseException {
   RelationSpec n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   Alias n6;
    n0 = RelationSpec();
    if (jj_2_6(2)) {
        n3 = new NodeOptional();
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        n5 = jj_consume_token(AS);
                   n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
        n2.addNode(n3);
      n6 = Alias();
        n2.addNode(n6);
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new SingleRelation(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationSpec RelationSpec() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   SchemaName n2;
   NodeToken n3;
   Token n4;
   RelationName n5;
    if (jj_2_7(2)) {
        n1 = new NodeSequence(2);
      n2 = SchemaName();
        n1.addNode(n2);
      n4 = jj_consume_token(PERIOD);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n1.addNode(n3);
        n0.addNode(n1);
    } else {
      ;
    }
    n5 = RelationName();
     {if (true) return new RelationSpec(n0,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public SchemaName SchemaName() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new SchemaName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationName RelationName() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new RelationName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public JoinClause JoinClause() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   InnerJoinSpec n2;
   OnClause n3;
   NodeSequence n4;
   OuterJoinSpec n5;
   OnClause n6;
   CrossJoinSpec n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INNER:
    case JOIN:
        n1 = new NodeSequence(2);
      n2 = InnerJoinSpec();
        n1.addNode(n2);
      n3 = OnClause();
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case LEFT:
    case RIGHT:
        n4 = new NodeSequence(2);
      n5 = OuterJoinSpec();
        n4.addNode(n5);
      n6 = OnClause();
        n4.addNode(n6);
        n0 = new NodeChoice(n4, 1);
      break;
    case CROSS:
      n7 = CrossJoinSpec();
        n0 = new NodeChoice(n7, 2);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new JoinClause(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public InnerJoinSpec InnerJoinSpec() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   FromListExpression n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INNER:
      n2 = jj_consume_token(INNER);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    n4 = jj_consume_token(JOIN);
               n3 = JTBToolkit.makeNodeToken(n4);
    n5 = FromListExpression();
     {if (true) return new InnerJoinSpec(n0,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public OuterJoinSpec OuterJoinSpec() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   FromListExpression n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT:
      n2 = jj_consume_token(LEFT);
                     n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case RIGHT:
      n4 = jj_consume_token(RIGHT);
                      n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUTER:
      n7 = jj_consume_token(OUTER);
                   n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    n9 = jj_consume_token(JOIN);
               n8 = JTBToolkit.makeNodeToken(n9);
    n10 = FromListExpression();
     {if (true) return new OuterJoinSpec(n0,n5,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  static final public CrossJoinSpec CrossJoinSpec() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   FromListExpression n4;
    n1 = jj_consume_token(CROSS);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(JOIN);
               n2 = JTBToolkit.makeNodeToken(n3);
    n4 = FromListExpression();
     {if (true) return new CrossJoinSpec(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public OnClause OnClause() throws ParseException {
   NodeToken n0;
   Token n1;
   SearchCondition n2;
    n1 = jj_consume_token(ON);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SearchCondition();
     {if (true) return new OnClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public WhereClause WhereClause() throws ParseException {
   NodeToken n0;
   Token n1;
   SearchCondition n2;
    n1 = jj_consume_token(WHERE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SearchCondition();
     {if (true) return new WhereClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public HavingClause HavingClause() throws ParseException {
   NodeToken n0;
   Token n1;
   SearchCondition n2;
    n1 = jj_consume_token(HAVING);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SearchCondition();
     {if (true) return new HavingClause(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public GroupByClause GroupByClause() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   GroupByList n4;
    n1 = jj_consume_token(GROUP);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(BY);
             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = GroupByList();
     {if (true) return new GroupByClause(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public GroupByList GroupByList() throws ParseException {
   GroupByExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   GroupByExpression n5;
    n0 = GroupByExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_5;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = GroupByExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new GroupByList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public GroupByExpression GroupByExpression() throws ParseException {
   ValueExpression n0;
    n0 = ValueExpression();
     {if (true) return new GroupByExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public OrderByClause OrderByClause() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   OrderByList n4;
    n1 = jj_consume_token(ORDER);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(BY);
             n2 = JTBToolkit.makeNodeToken(n3);
    n4 = OrderByList();
     {if (true) return new OrderByClause(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public OrderByList OrderByList() throws ParseException {
   OrderByExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   OrderByExpression n5;
    n0 = OrderByExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_6;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = OrderByExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new OrderByList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public OrderByExpression OrderByExpression() throws ParseException {
   ValueExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    n0 = ValueExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASC:
    case DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASC:
        n4 = jj_consume_token(ASC);
                    n3 = JTBToolkit.makeNodeToken(n4);
           n2 = new NodeChoice(n3, 0);
        break;
      case DESC:
        n6 = jj_consume_token(DESC);
                     n5 = JTBToolkit.makeNodeToken(n6);
           n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
     {if (true) return new OrderByExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public LimitClause LimitClause() throws ParseException {
   NodeToken n0;
   Token n1;
   LimitOffset n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   LimitCount n7;
    n1 = jj_consume_token(LIMIT);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = LimitOffset();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = LimitCount();
        n4.addNode(n7);
        n3.addNode(n4);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
     {if (true) return new LimitClause(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public LimitOffset LimitOffset() throws ParseException {
   ValueExpression n0;
    n0 = ValueExpression();
     {if (true) return new LimitOffset(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public LimitCount LimitCount() throws ParseException {
   ValueExpression n0;
    n0 = ValueExpression();
     {if (true) return new LimitCount(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ValueExpression ValueExpression() throws ParseException {
   NodeChoice n0;
   BinaryOperator n1;
   ParenthesizedExpression n2;
    if (jj_2_8(2)) {
      n1 = BinaryOperator();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_PAREN:
        n2 = ParenthesizedExpression();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ValueExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public BinaryOperator BinaryOperator() throws ParseException {
   OperandExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   ArithmeticalOperator n3;
   EqualityTest n4;
   LogicalTest n5;
   NullTest n6;
   BetweenTest n7;
    n0 = OperandExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case BETWEEN:
      case DIV:
      case IS:
      case LIKE:
      case MOD:
      case OR:
      case XOR:
      case PLUS:
      case MINUS:
      case ASTERISK:
      case SLASH:
      case PERCENT:
      case LT:
      case GT:
      case EQ:
      case LTE:
      case GTE:
      case NE:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
      case MOD:
      case PLUS:
      case MINUS:
      case ASTERISK:
      case SLASH:
      case PERCENT:
        n3 = ArithmeticalOperator();
           n2 = new NodeChoice(n3, 0);
        break;
      case LT:
      case GT:
      case EQ:
      case LTE:
      case GTE:
      case NE:
        n4 = EqualityTest();
           n2 = new NodeChoice(n4, 1);
        break;
      case AND:
      case LIKE:
      case OR:
      case XOR:
        n5 = LogicalTest();
           n2 = new NodeChoice(n5, 2);
        break;
      case IS:
        n6 = NullTest();
           n2 = new NodeChoice(n6, 3);
        break;
      case BETWEEN:
        n7 = BetweenTest();
           n2 = new NodeChoice(n7, 4);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new BinaryOperator(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public ArithmeticalOperator ArithmeticalOperator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   OperandExpression n15;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      n2 = jj_consume_token(PLUS);
                     n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case MINUS:
      n4 = jj_consume_token(MINUS);
                      n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case ASTERISK:
      n6 = jj_consume_token(ASTERISK);
                         n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case SLASH:
      n8 = jj_consume_token(SLASH);
                      n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case PERCENT:
      n10 = jj_consume_token(PERCENT);
                         n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case DIV:
      n12 = jj_consume_token(DIV);
                     n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    case MOD:
      n14 = jj_consume_token(MOD);
                     n13 = JTBToolkit.makeNodeToken(n14);
           n0 = new NodeChoice(n13, 6);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n15 = OperandExpression();
     {if (true) return new ArithmeticalOperator(n0,n15);}
    throw new Error("Missing return statement in function");
  }

  static final public EqualityTest EqualityTest() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   OperandExpression n13;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n2 = jj_consume_token(LT);
                   n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case GT:
      n4 = jj_consume_token(GT);
                   n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case EQ:
      n6 = jj_consume_token(EQ);
                   n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case LTE:
      n8 = jj_consume_token(LTE);
                    n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case GTE:
      n10 = jj_consume_token(GTE);
                     n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case NE:
      n12 = jj_consume_token(NE);
                    n11 = JTBToolkit.makeNodeToken(n12);
           n0 = new NodeChoice(n11, 5);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n13 = OperandExpression();
     {if (true) return new EqualityTest(n0,n13);}
    throw new Error("Missing return statement in function");
  }

  static final public LogicalTest LogicalTest() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   OperandExpression n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIKE:
      n2 = jj_consume_token(LIKE);
                     n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case AND:
      n4 = jj_consume_token(AND);
                    n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case OR:
      n6 = jj_consume_token(OR);
                   n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case XOR:
      n8 = jj_consume_token(XOR);
                    n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n9 = OperandExpression();
     {if (true) return new LogicalTest(n0,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public NullTest NullTest() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(IS);
             n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      n4 = jj_consume_token(NOT);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    n6 = jj_consume_token(NULL);
               n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new NullTest(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public BetweenTest BetweenTest() throws ParseException {
   NodeToken n0;
   Token n1;
   OperandExpression n2;
   NodeToken n3;
   Token n4;
   OperandExpression n5;
    n1 = jj_consume_token(BETWEEN);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = OperandExpression();
    n4 = jj_consume_token(AND);
              n3 = JTBToolkit.makeNodeToken(n4);
    n5 = OperandExpression();
     {if (true) return new BetweenTest(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public ParenthesizedExpression ParenthesizedExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   ValueExpression n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(L_PAREN);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ValueExpression();
    n4 = jj_consume_token(R_PAREN);
                  n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ParenthesizedExpression(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public OperandExpression OperandExpression() throws ParseException {
   NodeChoice n0;
   UnaryOperator n1;
   UnaryOperand n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case MINUS:
    case EXCLAMATION:
    case TILDE:
      n1 = UnaryOperator();
        n0 = new NodeChoice(n1, 0);
      break;
    case AGGREGATE:
    case AVG:
    case CASE:
    case CAST:
    case CONVERT:
    case COUNT:
    case EXISTS:
    case FALSE:
    case IN:
    case MAX:
    case MIN:
    case NULL:
    case SUM:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case L_PAREN:
      n2 = UnaryOperand();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new OperandExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryOperator UnaryOperator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   OperandExpression n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXCLAMATION:
      n2 = jj_consume_token(EXCLAMATION);
                            n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case NOT:
      n4 = jj_consume_token(NOT);
                    n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case TILDE:
      n6 = jj_consume_token(TILDE);
                      n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case MINUS:
      n8 = jj_consume_token(MINUS);
                      n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n9 = OperandExpression();
     {if (true) return new UnaryOperator(n0,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public UnaryOperand UnaryOperand() throws ParseException {
   NodeChoice n0;
   FunctionCall n1;
   Subquery n2;
   Literal n3;
   ColumnExpression n4;
    if (jj_2_9(2)) {
      n1 = FunctionCall();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_PAREN:
        n2 = Subquery();
        n0 = new NodeChoice(n2, 1);
        break;
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
        n3 = Literal();
        n0 = new NodeChoice(n3, 2);
        break;
      case IDENTIFIER:
        n4 = ColumnExpression();
        n0 = new NodeChoice(n4, 3);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new UnaryOperand(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionCall FunctionCall() throws ParseException {
   NodeChoice n0;
   OrdinaryFunctionCall n1;
   AggregateFunctionCall n2;
   BuiltInFunctionCall n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n1 = OrdinaryFunctionCall();
        n0 = new NodeChoice(n1, 0);
      break;
    case AGGREGATE:
    case AVG:
    case COUNT:
    case MAX:
    case MIN:
    case SUM:
      n2 = AggregateFunctionCall();
        n0 = new NodeChoice(n2, 1);
      break;
    case CASE:
    case CAST:
    case CONVERT:
    case EXISTS:
    case IN:
      n3 = BuiltInFunctionCall();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new FunctionCall(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public OrdinaryFunctionCall OrdinaryFunctionCall() throws ParseException {
   FunctionName n0;
   NodeToken n1;
   Token n2;
   ArgList n3;
   NodeToken n4;
   Token n5;
    n0 = FunctionName();
    n2 = jj_consume_token(L_PAREN);
                  n1 = JTBToolkit.makeNodeToken(n2);
    n3 = ArgList();
    n5 = jj_consume_token(R_PAREN);
                  n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new OrdinaryFunctionCall(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public FunctionName FunctionName() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new FunctionName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ArgList ArgList() throws ParseException {
   Argument n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Argument n5;
    n0 = Argument();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_8;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Argument();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ArgList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public AggregateFunctionCall AggregateFunctionCall() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   FunctionName n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   NodeChoice n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeChoice n23;
   NodeToken n24;
   Token n25;
   Argument n26;
   NodeToken n27;
   Token n28;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MIN:
      n2 = jj_consume_token(MIN);
                    n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case MAX:
      n4 = jj_consume_token(MAX);
                    n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    case COUNT:
      n6 = jj_consume_token(COUNT);
                      n5 = JTBToolkit.makeNodeToken(n6);
           n0 = new NodeChoice(n5, 2);
      break;
    case AVG:
      n8 = jj_consume_token(AVG);
                    n7 = JTBToolkit.makeNodeToken(n8);
           n0 = new NodeChoice(n7, 3);
      break;
    case SUM:
      n10 = jj_consume_token(SUM);
                     n9 = JTBToolkit.makeNodeToken(n10);
           n0 = new NodeChoice(n9, 4);
      break;
    case AGGREGATE:
           n11 = new NodeSequence(2);
      n13 = jj_consume_token(AGGREGATE);
                           n12 = JTBToolkit.makeNodeToken(n13);
           n11.addNode(n12);
      n14 = FunctionName();
           n11.addNode(n14);
           n0 = new NodeChoice(n11, 5);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n16 = jj_consume_token(L_PAREN);
                   n15 = JTBToolkit.makeNodeToken(n16);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALL:
    case DISTINCT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL:
        n20 = jj_consume_token(ALL);
                     n19 = JTBToolkit.makeNodeToken(n20);
           n18 = new NodeChoice(n19, 0);
        break;
      case DISTINCT:
        n22 = jj_consume_token(DISTINCT);
                          n21 = JTBToolkit.makeNodeToken(n22);
           n18 = new NodeChoice(n21, 1);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n17.addNode(n18);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
      n25 = jj_consume_token(ASTERISK);
                          n24 = JTBToolkit.makeNodeToken(n25);
           n23 = new NodeChoice(n24, 0);
      break;
    case AGGREGATE:
    case AVG:
    case CASE:
    case CAST:
    case CONVERT:
    case COUNT:
    case EXISTS:
    case FALSE:
    case IN:
    case MAX:
    case MIN:
    case NOT:
    case NULL:
    case SUM:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case L_PAREN:
    case MINUS:
    case EXCLAMATION:
    case TILDE:
      n26 = Argument();
           n23 = new NodeChoice(n26, 1);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n28 = jj_consume_token(R_PAREN);
                   n27 = JTBToolkit.makeNodeToken(n28);
     {if (true) return new AggregateFunctionCall(n0,n15,n17,n23,n27);}
    throw new Error("Missing return statement in function");
  }

  static final public BuiltInFunctionCall BuiltInFunctionCall() throws ParseException {
   NodeChoice n0;
   CastCall n1;
   ConvertCall n2;
   ExistsCall n3;
   InCall n4;
   CaseCall n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CAST:
      n1 = CastCall();
        n0 = new NodeChoice(n1, 0);
      break;
    case CONVERT:
      n2 = ConvertCall();
        n0 = new NodeChoice(n2, 1);
      break;
    case EXISTS:
      n3 = ExistsCall();
        n0 = new NodeChoice(n3, 2);
      break;
    case IN:
      n4 = InCall();
        n0 = new NodeChoice(n4, 3);
      break;
    case CASE:
      n5 = CaseCall();
        n0 = new NodeChoice(n5, 4);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new BuiltInFunctionCall(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public CastCall CastCall() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Argument n4;
   NodeToken n5;
   Token n6;
   Type n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(CAST);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(L_PAREN);
                  n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Argument();
    n6 = jj_consume_token(AS);
             n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Type();
    n9 = jj_consume_token(R_PAREN);
                  n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new CastCall(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  static final public ConvertCall ConvertCall() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Argument n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   EncodingName n9;
    n1 = jj_consume_token(CONVERT);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(L_PAREN);
                  n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Argument();
    n6 = jj_consume_token(R_PAREN);
                  n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(USING);
                n7 = JTBToolkit.makeNodeToken(n8);
    n9 = EncodingName();
     {if (true) return new ConvertCall(n0,n2,n4,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public ExistsCall ExistsCall() throws ParseException {
   NodeToken n0;
   Token n1;
   Subquery n2;
    n1 = jj_consume_token(EXISTS);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Subquery();
     {if (true) return new ExistsCall(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public InCall InCall() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Subquery n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ArgList n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(IN);
             n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_10(2)) {
      n3 = Subquery();
           n2 = new NodeChoice(n3, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case L_PAREN:
           n4 = new NodeSequence(3);
        n6 = jj_consume_token(L_PAREN);
                        n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
        n7 = ArgList();
           n4.addNode(n7);
        n9 = jj_consume_token(R_PAREN);
                        n8 = JTBToolkit.makeNodeToken(n9);
           n4.addNode(n8);
           n2 = new NodeChoice(n4, 1);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new InCall(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public CaseCall CaseCall() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   SimpleCaseExpression n3;
   SearchedCaseExpression n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(CASE);
               n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AGGREGATE:
    case AVG:
    case CASE:
    case CAST:
    case CONVERT:
    case COUNT:
    case EXISTS:
    case FALSE:
    case IN:
    case MAX:
    case MIN:
    case NOT:
    case NULL:
    case SUM:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case L_PAREN:
    case MINUS:
    case EXCLAMATION:
    case TILDE:
      n3 = SimpleCaseExpression();
           n2 = new NodeChoice(n3, 0);
      break;
    case WHEN:
      n4 = SearchedCaseExpression();
           n2 = new NodeChoice(n4, 1);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(END);
              n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new CaseCall(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public SimpleCaseExpression SimpleCaseExpression() throws ParseException {
   ValueExpression n0;
   SearchedCaseExpression n1;
    n0 = ValueExpression();
    n1 = SearchedCaseExpression();
     {if (true) return new SimpleCaseExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public SearchedCaseExpression SearchedCaseExpression() throws ParseException {
   WhenClauses n0;
   NodeToken n1;
   Token n2;
   DefaultExpression n3;
    n0 = WhenClauses();
    n2 = jj_consume_token(ELSE);
               n1 = JTBToolkit.makeNodeToken(n2);
    n3 = DefaultExpression();
     {if (true) return new SearchedCaseExpression(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public WhenClauses WhenClauses() throws ParseException {
   NodeList n0 = new NodeList();
   WhenClause n1;
    label_9:
    while (true) {
      n1 = WhenClause();
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHEN:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_9;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new WhenClauses(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public WhenClause WhenClause() throws ParseException {
   NodeToken n0;
   Token n1;
   WhenTest n2;
   NodeToken n3;
   Token n4;
   WhenOptionExpression n5;
    n1 = jj_consume_token(WHEN);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = WhenTest();
    n4 = jj_consume_token(THEN);
               n3 = JTBToolkit.makeNodeToken(n4);
    n5 = WhenOptionExpression();
     {if (true) return new WhenClause(n0,n2,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  static final public WhenTest WhenTest() throws ParseException {
   ValueExpression n0;
    n0 = ValueExpression();
     {if (true) return new WhenTest(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public WhenOptionExpression WhenOptionExpression() throws ParseException {
   ValueExpression n0;
    n0 = ValueExpression();
     {if (true) return new WhenOptionExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DefaultExpression DefaultExpression() throws ParseException {
   ValueExpression n0;
    n0 = ValueExpression();
     {if (true) return new DefaultExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public EncodingName EncodingName() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new EncodingName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Argument Argument() throws ParseException {
   ValueExpression n0;
    n0 = ValueExpression();
     {if (true) return new Argument(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ColumnExpression ColumnExpression() throws ParseException {
   NodeChoice n0;
   FullyQualifiedColumnName n1;
   QualifiedColumnName n2;
   UnqualifiedColumnName n3;
    if (jj_2_11(4)) {
      n1 = FullyQualifiedColumnName();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_12(2)) {
      n2 = QualifiedColumnName();
        n0 = new NodeChoice(n2, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        n3 = UnqualifiedColumnName();
        n0 = new NodeChoice(n3, 2);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ColumnExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public FullyQualifiedColumnName FullyQualifiedColumnName() throws ParseException {
   SchemaName n0;
   NodeToken n1;
   Token n2;
   RelationName n3;
   NodeToken n4;
   Token n5;
   ColumnName n6;
    n0 = SchemaName();
    n2 = jj_consume_token(PERIOD);
                 n1 = JTBToolkit.makeNodeToken(n2);
    n3 = RelationName();
    n5 = jj_consume_token(PERIOD);
                 n4 = JTBToolkit.makeNodeToken(n5);
    n6 = ColumnName();
     {if (true) return new FullyQualifiedColumnName(n0,n1,n3,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public QualifiedColumnName QualifiedColumnName() throws ParseException {
   RelationNameOrAlias n0;
   NodeToken n1;
   Token n2;
   ColumnName n3;
    n0 = RelationNameOrAlias();
    n2 = jj_consume_token(PERIOD);
                 n1 = JTBToolkit.makeNodeToken(n2);
    n3 = ColumnName();
     {if (true) return new QualifiedColumnName(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public RelationNameOrAlias RelationNameOrAlias() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new RelationNameOrAlias(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public UnqualifiedColumnName UnqualifiedColumnName() throws ParseException {
   ColumnName n0;
    n0 = ColumnName();
     {if (true) return new UnqualifiedColumnName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public ColumnName ColumnName() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new ColumnName(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Alias Alias() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Alias(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public SearchCondition SearchCondition() throws ParseException {
   ValueExpression n0;
    n0 = ValueExpression();
     {if (true) return new SearchCondition(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Literal Literal() throws ParseException {
   NodeChoice n0;
   NumericOrStringLiteral n1;
   BooleanLiteral n2;
   NullLiteral n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
      n1 = NumericOrStringLiteral();
        n0 = new NodeChoice(n1, 0);
      break;
    case FALSE:
    case TRUE:
      n2 = BooleanLiteral();
        n0 = new NodeChoice(n2, 1);
      break;
    case NULL:
      n3 = NullLiteral();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Literal(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public NumericOrStringLiteral NumericOrStringLiteral() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n2 = jj_consume_token(INTEGER_LITERAL);
                             n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FLOATING_POINT_LITERAL:
      n4 = jj_consume_token(FLOATING_POINT_LITERAL);
                                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case STRING_LITERAL:
      n6 = jj_consume_token(STRING_LITERAL);
                            n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new NumericOrStringLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanLiteral BooleanLiteral() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      n2 = jj_consume_token(TRUE);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FALSE:
      n4 = jj_consume_token(FALSE);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new BooleanLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public NullLiteral NullLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NULL);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new NullLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
   NodeChoice n0;
   NumericType n1;
   StringType n2;
   BooleanType n3;
   DatetimeType n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIGINT:
    case INT:
    case INTEGER:
    case SMALLINT:
    case TINYINT:
      n1 = NumericType();
        n0 = new NodeChoice(n1, 0);
      break;
    case CHAR:
    case VARCHAR:
      n2 = StringType();
        n0 = new NodeChoice(n2, 1);
      break;
    case BOOLEAN:
      n3 = BooleanType();
        n0 = new NodeChoice(n3, 2);
      break;
    case DATE:
    case DATETIME:
    case TIME:
      n4 = DatetimeType();
        n0 = new NodeChoice(n4, 3);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public NumericType NumericType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TINYINT:
      n2 = jj_consume_token(TINYINT);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case SMALLINT:
      n4 = jj_consume_token(SMALLINT);
                      n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case INT:
      n6 = jj_consume_token(INT);
                 n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case INTEGER:
      n8 = jj_consume_token(INTEGER);
                     n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case BIGINT:
      n10 = jj_consume_token(BIGINT);
                     n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new NumericType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public StringType StringType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      n2 = jj_consume_token(CHAR);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case VARCHAR:
      n4 = jj_consume_token(VARCHAR);
                     n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new StringType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanType BooleanType() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(BOOLEAN);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new BooleanType(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public DatetimeType DatetimeType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATE:
      n2 = jj_consume_token(DATE);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case TIME:
      n4 = jj_consume_token(TIME);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case DATETIME:
      n6 = jj_consume_token(DATETIME);
                      n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new DatetimeType(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_3R_110() {
    if (jj_3R_117()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(PERIOD)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_3R_116()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_57()) return true;
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_115()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(LIKE)) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(PERIOD)) return true;
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(CAST)) return true;
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_130() {
    if (jj_scan_token(WHEN)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_3R_114()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_97()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(GTE)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(CROSS)) return true;
    if (jj_scan_token(JOIN)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_3R_130()) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(LTE)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_102()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_94()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    Token xsp;
    if (jj_3R_128()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_101()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(OUTER)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_120()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(RIGHT)) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_3R_126()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(LEFT)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    if (jj_scan_token(JOIN)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_3R_119()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(EXCLAMATION)) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_3R_113()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(PERCENT)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    }
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(AGGREGATE)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_31()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_3R_112()) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_3R_106()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(INNER)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(AVG)) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_scan_token(JOIN)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(PERIOD)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_3R_118()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(IN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  static private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(BETWEEN)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(EXISTS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(IS)) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_3R_129()) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_scan_token(CONVERT)) return true;
    if (jj_scan_token(L_PAREN)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SQLParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[53];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x40001000,0x40001000,0x3610800,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x3610800,0x0,0x0,0x4000,0x4000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x20008000,0x20008000,0x0,0x0,0x80022000,0x80022000,0x80000000,0x0,0x2000,0x0,0x3610800,0x0,0x0,0x3610800,0x0,0x2010800,0x40001000,0x40001000,0x3610800,0x1600000,0x0,0x3610800,0x0,0x0,0x0,0x0,0x0,0x188c0000,0x40000,0x800000,0x18000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000000,0x0,0x0,0x201b008c,0x0,0x20,0x800000,0x8000,0x10,0x0,0x0,0x201b008c,0x0,0x0,0x0,0x0,0x2003100,0x100,0x2002000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x444800,0x444800,0x40000,0x0,0x404000,0x80000,0x201b008c,0x80000,0x100008,0x20030084,0x0,0x20030000,0x0,0x0,0x201b008c,0x84,0x0,0x201b008c,0x0,0x0,0x100008,0x0,0x8,0x8000600,0x8000600,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0xc825104,0x40,0x0,0x0,0x0,0x0,0x200000,0x0,0x4825104,0x200000,0x820000,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x0,0x0,0x200000,0x800000,0xfe000080,0xfe000080,0x3e000000,0xc0000000,0x80,0x0,0x4825104,0x4000000,0x825104,0x20000,0x200000,0x0,0x0,0x0,0xc825104,0x0,0x800000,0x4825124,0x20,0x20000,0x5104,0x5100,0x4,0x13,0x2,0x10,0x1,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xf,0x0,0xf,0x0,0x0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[12];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[104];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 53; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 104; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
