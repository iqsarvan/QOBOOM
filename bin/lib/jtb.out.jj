//
// Generated by JTB 1.3.2
//



PARSER_BEGIN(SQLParser)
import syntaxtree.*;
import java.util.Vector;


public class SQLParser 
{
   public static void main(String args[]) throws ParseException
   {
      SQLParser parser = new SQLParser(System.in);
      parser.SqlScript();
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(SQLParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

MORE :
{
   "--" : IN_SINGLE_LINE_COMMENT
   | "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT> SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT
}

<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN :
{
   <MULTI_LINE_COMMENT: "*/"> : DEFAULT
}

<IN_SINGLE_LINE_COMMENT, IN_MULTI_LINE_COMMENT> MORE :
{
   <~[]>
}

TOKEN :
{
   <AGGREGATE: "aggregate">
   | <ALL: "all">
   | <AND: "and">
   | <AS: "as">
   | <ASC: "asc">
   | <AVG: "avg">
   | <BETWEEN: "between">
   | <BIGINT: "bigint">
   | <BOOLEAN: "boolean">
   | <BY: "by">
   | <CASE: "case">
   | <CAST: "cast">
   | <CHAR: "char">
   | <CONVERT: "convert">
   | <COUNT: "count">
   | <CROSS: "cross">
   | <DATE: "date">
   | <DATETIME: "datetime">
   | <DESC: "desc">
   | <DISTINCT: "distinct">
   | <DIV: "div">
   | <ELSE: "else">
   | <END: "end">
   | <EXISTS: "exists">
   | <FALSE: "false">
   | <FROM: "from">
   | <GROUP: "group">
   | <HAVING: "having">
   | <IN: "in">
   | <INNER: "inner">
   | <INT: "int">
   | <INTEGER: "integer">
   | <IS: "is">
   | <JOIN: "join">
   | <LEFT: "left">
   | <LIKE: "like">
   | <LIMIT: "limit">
   | <MAX: "max">
   | <MIN: "min">
   | <MOD: "mod">
   | <NOT: "not">
   | <NULL: "null">
   | <ON: "on">
   | <OR: "or">
   | <ORDER: "order">
   | <OUTER: "outer">
   | <RIGHT: "right">
   | <SELECT: "select">
   | <SMALLINT: "smallint">
   | <START: "start">
   | <SUM: "sum">
   | <SYMBOL: "symbol">
   | <THEN: "then">
   | <TIME: "time">
   | <TINYINT: "tinyint">
   | <TRUE: "true">
   | <USING: "using">
   | <VARCHAR: "varchar">
   | <WHEN: "when">
   | <WHERE: "where">
   | <XOR: "xor">
}

TOKEN :
{
   <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l", "L"])? | <HEX_LITERAL> (["l", "L"])? | <OCTAL_LITERAL> (["l", "L"])?>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <#HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <STRING_LITERAL: <SQ_STRING_LITERAL> | <DQ_STRING_LITERAL>>
   | <#SQ_STRING_LITERAL: "'" ((~["'", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])))* "'">
   | <#DQ_STRING_LITERAL: "\"" ((~["\"", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])))* "\"">
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<PART_LETTER>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z"]>
   | <#PART_LETTER: ["$", "0"-"9", "A"-"Z", "_", "a"-"z"]>
}

TOKEN :
{
   <SEMICOLON: ";">
   | <COMMA: ",">
   | <PERIOD: ".">
   | <L_PAREN: "(">
   | <R_PAREN: ")">
   | <PLUS: "+">
   | <MINUS: "-">
   | <ASTERISK: "*">
   | <SLASH: "/">
   | <PERCENT: "%">
   | <LT: "<">
   | <GT: ">">
   | <EQ: "=">
   | <LTE: "<=">
   | <GTE: ">=">
   | <NE: <NE1> | <NE2>>
   | <#NE1: "<>">
   | <#NE2: "!=">
   | <EXCLAMATION: "!">
   | <TILDE: "~">
}

SqlScript SqlScript() :
{
   NodeList n0 = new NodeList();
   SqlStatement n1;
   NodeToken n2;
   Token n3;

   
}
{
   (
      n1=SqlStatement()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   n3=<EOF> { 
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
   }
   
   { return new SqlScript(n0,n2); }
}

SqlStatement SqlStatement() :
{
   SqlOperator n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=SqlOperator()
   n2=<SEMICOLON> { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new SqlStatement(n0,n1); }
}

SqlOperator SqlOperator() :
{
   Query n0;

   
}
{
   n0=Query()
   
   { return new SqlOperator(n0); }
}

Query Query() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeToken n9;
   Token n10;
   SelectList n11;
   NodeOptional n12 = new NodeOptional();
   NodeSequence n13;
   FromList n14;
   NodeOptional n15;
   WhereClause n16;
   NodeOptional n17;
   GroupByClause n18;
   NodeOptional n19;
   OrderByClause n20;
   NodeOptional n21;
   LimitClause n22;

   
}
{
   n1=<SELECT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<ALL> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<DISTINCT> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      )
      { n2.addNode(n3); }
   )?
   (
      (
         n10=<ASTERISK> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8 = new NodeChoice(n9, 0); }
      |
         n11=SelectList()
         { n8 = new NodeChoice(n11, 1); }
      )
      
   )
   (
      { n15 = new NodeOptional(); }
      { n17 = new NodeOptional(); }
      { n19 = new NodeOptional(); }
      { n21 = new NodeOptional(); }
      { n13 = new NodeSequence(5); }
      n14=FromList()
      { n13.addNode(n14); }
      (
         n16=WhereClause()
         { n15.addNode(n16); }
      )?
      { n13.addNode(n15); }
      (
         n18=GroupByClause()
         { n17.addNode(n18); }
      )?
      { n13.addNode(n17); }
      (
         n20=OrderByClause()
         { n19.addNode(n20); }
      )?
      { n13.addNode(n19); }
      (
         n22=LimitClause()
         { n21.addNode(n22); }
      )?
      { n13.addNode(n21); }
      { n12.addNode(n13); }
   )?
   
   { return new Query(n0,n2,n8,n12); }
}

SelectList SelectList() :
{
   SelectExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SelectExpression n5;

   
}
{
   n0=SelectExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SelectExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SelectList(n0,n1); }
}

SelectExpression SelectExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   RelationName n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   SchemaName n8;
   NodeToken n9;
   Token n10;
   RelationName n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeSequence n16;
   ValueExpression n17;
   NodeOptional n18 = new NodeOptional();
   NodeSequence n19;
   NodeOptional n20;
   NodeToken n21;
   Token n22;
   Alias n23;

   
}
{
   (
      (
         LOOKAHEAD(5)
         { n1 = new NodeSequence(4); }
         n2=RelationName()
         { n1.addNode(n2); }
         n4=<PERIOD> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n1.addNode(n3); }
         n6=<ASTERISK> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n1.addNode(n5); }
         { n0 = new NodeChoice(n1, 0); }
      |
         LOOKAHEAD(5)
         { n7 = new NodeSequence(6); }
         n8=SchemaName()
         { n7.addNode(n8); }
         n10=<PERIOD> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n7.addNode(n9); }
         n11=RelationName()
         { n7.addNode(n11); }
         n13=<PERIOD> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n7.addNode(n12); }
         n15=<ASTERISK> { n14 = JTBToolkit.makeNodeToken(n15); }
         { n7.addNode(n14); }
         { n0 = new NodeChoice(n7, 1); }
      |
         { n16 = new NodeSequence(2); }
         n17=ValueExpression()
         { n16.addNode(n17); }
         (
            LOOKAHEAD(2)
            { n20 = new NodeOptional(); }
            { n19 = new NodeSequence(2); }
            (
               n22=<AS> { n21 = JTBToolkit.makeNodeToken(n22); }
               { n20.addNode(n21); }
            )?
            { n19.addNode(n20); }
            n23=Alias()
            { n19.addNode(n23); }
            { n18.addNode(n19); }
         )?
         { n16.addNode(n18); }
         { n0 = new NodeChoice(n16, 2); }
      )
      
   )
   
   { return new SelectExpression(n0); }
}

FromList FromList() :
{
   NodeToken n0;
   Token n1;
   FromListExpression n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   FromListExpression n7;

   
}
{
   n1=<FROM> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FromListExpression()
   (
      { n4 = new NodeSequence(2); }
      n6=<COMMA> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=FromListExpression()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new FromList(n0,n2,n3); }
}

FromListExpression FromListExpression() :
{
   Relation n0;
   NodeListOptional n1 = new NodeListOptional();
   JoinClause n2;

   
}
{
   n0=Relation()
   (
      LOOKAHEAD(2)
      n2=JoinClause()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new FromListExpression(n0,n1); }
}

Relation Relation() :
{
   NodeChoice n0;
   SingleRelation n1;
   NamedSubquery n2;

   
}
{
   (
      n1=SingleRelation()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=NamedSubquery()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Relation(n0); }
}

NamedSubquery NamedSubquery() :
{
   Subquery n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   Alias n6;

   
}
{
   n0=Subquery()
   (
      LOOKAHEAD(2)
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5=<AS> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=Alias()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )?
   
   { return new NamedSubquery(n0,n1); }
}

Subquery Subquery() :
{
   NodeToken n0;
   Token n1;
   Query n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1=<L_PAREN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Query()
   n4=<R_PAREN> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new Subquery(n0,n2,n3); }
}

SingleRelation SingleRelation() :
{
   RelationSpec n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeOptional n3;
   NodeToken n4;
   Token n5;
   Alias n6;

   
}
{
   n0=RelationSpec()
   (
      LOOKAHEAD(2)
      { n3 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      (
         n5=<AS> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
      )?
      { n2.addNode(n3); }
      n6=Alias()
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )?
   
   { return new SingleRelation(n0,n1); }
}

RelationSpec RelationSpec() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   SchemaName n2;
   NodeToken n3;
   Token n4;
   RelationName n5;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(2); }
      n2=SchemaName()
      { n1.addNode(n2); }
      n4=<PERIOD> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      { n0.addNode(n1); }
   )?
   n5=RelationName()
   
   { return new RelationSpec(n0,n5); }
}

SchemaName SchemaName() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new SchemaName(n0); }
}

RelationName RelationName() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new RelationName(n0); }
}

JoinClause JoinClause() :
{
   NodeChoice n0;
   NodeSequence n1;
   InnerJoinSpec n2;
   OnClause n3;
   NodeSequence n4;
   OuterJoinSpec n5;
   OnClause n6;
   CrossJoinSpec n7;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=InnerJoinSpec()
      { n1.addNode(n2); }
      n3=OnClause()
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n4 = new NodeSequence(2); }
      n5=OuterJoinSpec()
      { n4.addNode(n5); }
      n6=OnClause()
      { n4.addNode(n6); }
      { n0 = new NodeChoice(n4, 1); }
   |
      n7=CrossJoinSpec()
      { n0 = new NodeChoice(n7, 2); }
   )
   
   { return new JoinClause(n0); }
}

InnerJoinSpec InnerJoinSpec() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   FromListExpression n5;

   
}
{
   (
      n2=<INNER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n4=<JOIN> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=FromListExpression()
   
   { return new InnerJoinSpec(n0,n3,n5); }
}

OuterJoinSpec OuterJoinSpec() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   FromListExpression n10;

   
}
{
   (
      (
         n2=<LEFT> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<RIGHT> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   (
      n7=<OUTER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   n9=<JOIN> { n8 = JTBToolkit.makeNodeToken(n9); }
   n10=FromListExpression()
   
   { return new OuterJoinSpec(n0,n5,n8,n10); }
}

CrossJoinSpec CrossJoinSpec() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   FromListExpression n4;

   
}
{
   n1=<CROSS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<JOIN> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=FromListExpression()
   
   { return new CrossJoinSpec(n0,n2,n4); }
}

OnClause OnClause() :
{
   NodeToken n0;
   Token n1;
   SearchCondition n2;

   
}
{
   n1=<ON> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SearchCondition()
   
   { return new OnClause(n0,n2); }
}

WhereClause WhereClause() :
{
   NodeToken n0;
   Token n1;
   SearchCondition n2;

   
}
{
   n1=<WHERE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SearchCondition()
   
   { return new WhereClause(n0,n2); }
}

HavingClause HavingClause() :
{
   NodeToken n0;
   Token n1;
   SearchCondition n2;

   
}
{
   n1=<HAVING> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SearchCondition()
   
   { return new HavingClause(n0,n2); }
}

GroupByClause GroupByClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   GroupByList n4;

   
}
{
   n1=<GROUP> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<BY> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=GroupByList()
   
   { return new GroupByClause(n0,n2,n4); }
}

GroupByList GroupByList() :
{
   GroupByExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   GroupByExpression n5;

   
}
{
   n0=GroupByExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=GroupByExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new GroupByList(n0,n1); }
}

GroupByExpression GroupByExpression() :
{
   ValueExpression n0;

   
}
{
   n0=ValueExpression()
   
   { return new GroupByExpression(n0); }
}

OrderByClause OrderByClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   OrderByList n4;

   
}
{
   n1=<ORDER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<BY> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=OrderByList()
   
   { return new OrderByClause(n0,n2,n4); }
}

OrderByList OrderByList() :
{
   OrderByExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   OrderByExpression n5;

   
}
{
   n0=OrderByExpression()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=OrderByExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new OrderByList(n0,n1); }
}

OrderByExpression OrderByExpression() :
{
   ValueExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n0=ValueExpression()
   (
      (
         n4=<ASC> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<DESC> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      )
      { n1.addNode(n2); }
   )?
   
   { return new OrderByExpression(n0,n1); }
}

LimitClause LimitClause() :
{
   NodeToken n0;
   Token n1;
   LimitOffset n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   LimitCount n7;

   
}
{
   n1=<LIMIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=LimitOffset()
   (
      { n4 = new NodeSequence(2); }
      n6=<COMMA> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=LimitCount()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   
   { return new LimitClause(n0,n2,n3); }
}

LimitOffset LimitOffset() :
{
   ValueExpression n0;

   
}
{
   n0=ValueExpression()
   
   { return new LimitOffset(n0); }
}

LimitCount LimitCount() :
{
   ValueExpression n0;

   
}
{
   n0=ValueExpression()
   
   { return new LimitCount(n0); }
}

ValueExpression ValueExpression() :
{
   NodeChoice n0;
   BinaryOperator n1;
   ParenthesizedExpression n2;

   
}
{
   (
      LOOKAHEAD(2)
      n1=BinaryOperator()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ParenthesizedExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ValueExpression(n0); }
}

BinaryOperator BinaryOperator() :
{
   OperandExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   ArithmeticalOperator n3;
   EqualityTest n4;
   LogicalTest n5;
   NullTest n6;
   BetweenTest n7;

   
}
{
   n0=OperandExpression()
   (
      (
         n3=ArithmeticalOperator()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=EqualityTest()
         { n2 = new NodeChoice(n4, 1); }
      |
         n5=LogicalTest()
         { n2 = new NodeChoice(n5, 2); }
      |
         n6=NullTest()
         { n2 = new NodeChoice(n6, 3); }
      |
         n7=BetweenTest()
         { n2 = new NodeChoice(n7, 4); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new BinaryOperator(n0,n1); }
}

ArithmeticalOperator ArithmeticalOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   OperandExpression n15;

   
}
{
   (
      (
         n2=<PLUS> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<MINUS> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<ASTERISK> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<SLASH> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<PERCENT> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<DIV> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14=<MOD> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      )
      
   )
   n15=OperandExpression()
   
   { return new ArithmeticalOperator(n0,n15); }
}

EqualityTest EqualityTest() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   OperandExpression n13;

   
}
{
   (
      (
         n2=<LT> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<GT> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<EQ> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<LTE> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<GTE> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12=<NE> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      )
      
   )
   n13=OperandExpression()
   
   { return new EqualityTest(n0,n13); }
}

LogicalTest LogicalTest() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   OperandExpression n9;

   
}
{
   (
      (
         n2=<LIKE> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<AND> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<OR> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<XOR> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      )
      
   )
   n9=OperandExpression()
   
   { return new LogicalTest(n0,n9); }
}

NullTest NullTest() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<IS> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<NOT> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=<NULL> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new NullTest(n0,n2,n5); }
}

BetweenTest BetweenTest() :
{
   NodeToken n0;
   Token n1;
   OperandExpression n2;
   NodeToken n3;
   Token n4;
   OperandExpression n5;

   
}
{
   n1=<BETWEEN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=OperandExpression()
   n4=<AND> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=OperandExpression()
   
   { return new BetweenTest(n0,n2,n3,n5); }
}

ParenthesizedExpression ParenthesizedExpression() :
{
   NodeToken n0;
   Token n1;
   ValueExpression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1=<L_PAREN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ValueExpression()
   n4=<R_PAREN> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ParenthesizedExpression(n0,n2,n3); }
}

OperandExpression OperandExpression() :
{
   NodeChoice n0;
   UnaryOperator n1;
   UnaryOperand n2;

   
}
{
   (
      n1=UnaryOperator()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=UnaryOperand()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new OperandExpression(n0); }
}

UnaryOperator UnaryOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   OperandExpression n9;

   
}
{
   (
      (
         n2=<EXCLAMATION> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<NOT> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<TILDE> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<MINUS> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      )
      
   )
   n9=OperandExpression()
   
   { return new UnaryOperator(n0,n9); }
}

UnaryOperand UnaryOperand() :
{
   NodeChoice n0;
   FunctionCall n1;
   Subquery n2;
   Literal n3;
   ColumnExpression n4;

   
}
{
   (
      LOOKAHEAD(2)
      n1=FunctionCall()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Subquery()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Literal()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=ColumnExpression()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new UnaryOperand(n0); }
}

FunctionCall FunctionCall() :
{
   NodeChoice n0;
   OrdinaryFunctionCall n1;
   AggregateFunctionCall n2;
   BuiltInFunctionCall n3;

   
}
{
   (
      n1=OrdinaryFunctionCall()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=AggregateFunctionCall()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=BuiltInFunctionCall()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new FunctionCall(n0); }
}

OrdinaryFunctionCall OrdinaryFunctionCall() :
{
   FunctionName n0;
   NodeToken n1;
   Token n2;
   ArgList n3;
   NodeToken n4;
   Token n5;

   
}
{
   n0=FunctionName()
   n2=<L_PAREN> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=ArgList()
   n5=<R_PAREN> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new OrdinaryFunctionCall(n0,n1,n3,n4); }
}

FunctionName FunctionName() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new FunctionName(n0); }
}

ArgList ArgList() :
{
   Argument n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Argument n5;

   
}
{
   n0=Argument()
   (
      { n2 = new NodeSequence(2); }
      n4=<COMMA> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Argument()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ArgList(n0,n1); }
}

AggregateFunctionCall AggregateFunctionCall() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   FunctionName n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   NodeChoice n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeChoice n23;
   NodeToken n24;
   Token n25;
   Argument n26;
   NodeToken n27;
   Token n28;

   
}
{
   (
      (
         n2=<MIN> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<MAX> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<COUNT> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<AVG> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10=<SUM> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         { n11 = new NodeSequence(2); }
         n13=<AGGREGATE> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         n14=FunctionName()
         { n11.addNode(n14); }
         { n0 = new NodeChoice(n11, 5); }
      )
      
   )
   n16=<L_PAREN> { n15 = JTBToolkit.makeNodeToken(n16); }
   (
      (
         n20=<ALL> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n18 = new NodeChoice(n19, 0); }
      |
         n22=<DISTINCT> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n18 = new NodeChoice(n21, 1); }
      )
      { n17.addNode(n18); }
   )?
   (
      (
         n25=<ASTERISK> { n24 = JTBToolkit.makeNodeToken(n25); }
         { n23 = new NodeChoice(n24, 0); }
      |
         n26=Argument()
         { n23 = new NodeChoice(n26, 1); }
      )
      
   )
   n28=<R_PAREN> { n27 = JTBToolkit.makeNodeToken(n28); }
   
   { return new AggregateFunctionCall(n0,n15,n17,n23,n27); }
}

BuiltInFunctionCall BuiltInFunctionCall() :
{
   NodeChoice n0;
   CastCall n1;
   ConvertCall n2;
   ExistsCall n3;
   InCall n4;
   CaseCall n5;

   
}
{
   (
      n1=CastCall()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ConvertCall()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=ExistsCall()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=InCall()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=CaseCall()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new BuiltInFunctionCall(n0); }
}

CastCall CastCall() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Argument n4;
   NodeToken n5;
   Token n6;
   Type n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<CAST> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<L_PAREN> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Argument()
   n6=<AS> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Type()
   n9=<R_PAREN> { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new CastCall(n0,n2,n4,n5,n7,n8); }
}

ConvertCall ConvertCall() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Argument n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   EncodingName n9;

   
}
{
   n1=<CONVERT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<L_PAREN> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Argument()
   n6=<R_PAREN> { n5 = JTBToolkit.makeNodeToken(n6); }
   n8=<USING> { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=EncodingName()
   
   { return new ConvertCall(n0,n2,n4,n5,n7,n9); }
}

ExistsCall ExistsCall() :
{
   NodeToken n0;
   Token n1;
   Subquery n2;

   
}
{
   n1=<EXISTS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Subquery()
   
   { return new ExistsCall(n0,n2); }
}

InCall InCall() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   Subquery n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ArgList n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<IN> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         LOOKAHEAD(2)
         n3=Subquery()
         { n2 = new NodeChoice(n3, 0); }
      |
         { n4 = new NodeSequence(3); }
         n6=<L_PAREN> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n7=ArgList()
         { n4.addNode(n7); }
         n9=<R_PAREN> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n4.addNode(n8); }
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   
   { return new InCall(n0,n2); }
}

CaseCall CaseCall() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   SimpleCaseExpression n3;
   SearchedCaseExpression n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1=<CASE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=SimpleCaseExpression()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=SearchedCaseExpression()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   n6=<END> { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new CaseCall(n0,n2,n5); }
}

SimpleCaseExpression SimpleCaseExpression() :
{
   ValueExpression n0;
   SearchedCaseExpression n1;

   
}
{
   n0=ValueExpression()
   n1=SearchedCaseExpression()
   
   { return new SimpleCaseExpression(n0,n1); }
}

SearchedCaseExpression SearchedCaseExpression() :
{
   WhenClauses n0;
   NodeToken n1;
   Token n2;
   DefaultExpression n3;

   
}
{
   n0=WhenClauses()
   n2=<ELSE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=DefaultExpression()
   
   { return new SearchedCaseExpression(n0,n1,n3); }
}

WhenClauses WhenClauses() :
{
   NodeList n0 = new NodeList();
   WhenClause n1;

   
}
{
   (
      n1=WhenClause()
      { n0.addNode(n1); }
   )+
   { n0.nodes.trimToSize(); }
   
   { return new WhenClauses(n0); }
}

WhenClause WhenClause() :
{
   NodeToken n0;
   Token n1;
   WhenTest n2;
   NodeToken n3;
   Token n4;
   WhenOptionExpression n5;

   
}
{
   n1=<WHEN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=WhenTest()
   n4=<THEN> { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=WhenOptionExpression()
   
   { return new WhenClause(n0,n2,n3,n5); }
}

WhenTest WhenTest() :
{
   ValueExpression n0;

   
}
{
   n0=ValueExpression()
   
   { return new WhenTest(n0); }
}

WhenOptionExpression WhenOptionExpression() :
{
   ValueExpression n0;

   
}
{
   n0=ValueExpression()
   
   { return new WhenOptionExpression(n0); }
}

DefaultExpression DefaultExpression() :
{
   ValueExpression n0;

   
}
{
   n0=ValueExpression()
   
   { return new DefaultExpression(n0); }
}

EncodingName EncodingName() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new EncodingName(n0); }
}

Argument Argument() :
{
   ValueExpression n0;

   
}
{
   n0=ValueExpression()
   
   { return new Argument(n0); }
}

ColumnExpression ColumnExpression() :
{
   NodeChoice n0;
   FullyQualifiedColumnName n1;
   QualifiedColumnName n2;
   UnqualifiedColumnName n3;

   
}
{
   (
      LOOKAHEAD(4)
      n1=FullyQualifiedColumnName()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      n2=QualifiedColumnName()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=UnqualifiedColumnName()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new ColumnExpression(n0); }
}

FullyQualifiedColumnName FullyQualifiedColumnName() :
{
   SchemaName n0;
   NodeToken n1;
   Token n2;
   RelationName n3;
   NodeToken n4;
   Token n5;
   ColumnName n6;

   
}
{
   n0=SchemaName()
   n2=<PERIOD> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=RelationName()
   n5=<PERIOD> { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=ColumnName()
   
   { return new FullyQualifiedColumnName(n0,n1,n3,n4,n6); }
}

QualifiedColumnName QualifiedColumnName() :
{
   RelationNameOrAlias n0;
   NodeToken n1;
   Token n2;
   ColumnName n3;

   
}
{
   n0=RelationNameOrAlias()
   n2=<PERIOD> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=ColumnName()
   
   { return new QualifiedColumnName(n0,n1,n3); }
}

RelationNameOrAlias RelationNameOrAlias() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new RelationNameOrAlias(n0); }
}

UnqualifiedColumnName UnqualifiedColumnName() :
{
   ColumnName n0;

   
}
{
   n0=ColumnName()
   
   { return new UnqualifiedColumnName(n0); }
}

ColumnName ColumnName() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new ColumnName(n0); }
}

Alias Alias() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Alias(n0); }
}

SearchCondition SearchCondition() :
{
   ValueExpression n0;

   
}
{
   n0=ValueExpression()
   
   { return new SearchCondition(n0); }
}

Literal Literal() :
{
   NodeChoice n0;
   NumericOrStringLiteral n1;
   BooleanLiteral n2;
   NullLiteral n3;

   
}
{
   (
      n1=NumericOrStringLiteral()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=BooleanLiteral()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=NullLiteral()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new Literal(n0); }
}

NumericOrStringLiteral NumericOrStringLiteral() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<INTEGER_LITERAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FLOATING_POINT_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<STRING_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new NumericOrStringLiteral(n0); }
}

BooleanLiteral BooleanLiteral() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<TRUE> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FALSE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new BooleanLiteral(n0); }
}

NullLiteral NullLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<NULL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new NullLiteral(n0); }
}

Type Type() :
{
   NodeChoice n0;
   NumericType n1;
   StringType n2;
   BooleanType n3;
   DatetimeType n4;

   
}
{
   (
      n1=NumericType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=StringType()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=BooleanType()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=DatetimeType()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new Type(n0); }
}

NumericType NumericType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;

   
}
{
   (
      n2=<TINYINT> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<SMALLINT> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<INT> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<INTEGER> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10=<BIGINT> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   )
   
   { return new NumericType(n0); }
}

StringType StringType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<CHAR> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<VARCHAR> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new StringType(n0); }
}

BooleanType BooleanType() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<BOOLEAN> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new BooleanType(n0); }
}

DatetimeType DatetimeType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<DATE> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<TIME> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<DATETIME> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new DatetimeType(n0); }
}
